if ("WebSocket" in window === false) { window.WebSocket = function (d, c) { $(window).bind("beforeunload", function () { a.close() }); var a = this; this.client = { guid: null }; this.handler = d; function b(h, f) { if (typeof h !== undefined && h !== "") { var e = h.split("&"); for (var g = 0; g < e.length; g++) { if (e[g].indexOf(f) > -1) { return e[g].split("=")[1] } } } return "" } this.MessageEvent = function (e) { return { type: "message", data: JSON.stringify(e) } }; this.payload = function (e) { return { handler: a.handler, client: a.client.guid, Json: e } }; this.listener = function () { return { handler: a.handler, client: a.client.guid } }; this.readystate = 0; a.client.guid = b(d, "XSocketsClientStorageGuid"); this.ajax("/Fallback/Init", "GET", { url: a.handler, client: a.client.guid }, true, function (e) { a.client.guid = JSON.parse(e.data).ClientGuid; a.readyState = 1; a.onmessage(new a.MessageEvent(e)); a.listen() }); return this }; window.WebSocket.prototype.close = function () { this.ajax("/Fallback/Close", "GET", { client: self.client.guid }, true, function () { }) }; window.WebSocket.prototype.readyState = 0; window.WebSocket.prototype.send = function (a) { var b = JSON.parse(a); if (b.event == "xsockets.xnode.open") { return } if (b.event == "xsockets.unsubscribe") { this.ajax("/Fallback/Unind", "GET", { client: this.client.guid, event: JSON.parse(b.data).Event }, true, function () { }) } else { if (b.event == "xsockets.subscribe") { this.ajax("/Fallback/Bind", "GET", { client: this.client.guid, event: JSON.parse(b.data).Event }, false, function () { }) } else { this.ajax("/Fallback/Trigger", "POST", this.payload(a), false, function () { }) } } }; window.WebSocket.prototype.close = function () { $.getJSON("/Fallback/Close", { client: this.client.guid }).done(function () { sessionStorage.clear() }) }; window.WebSocket.prototype.ajax = function (a, f, d, c, e) { var b = { processData: true, dataType: "json", type: f, url: a, async: c, cache: false, success: e, data: d }; $.ajax(b) }; window.WebSocket.prototype.onmessage = function (a) { }; window.WebSocket.prototype.onerror = function (a) { }; window.WebSocket.prototype.listen = function () { var a = this; this.ajax("/Fallback/Listen", "POST", this.listener(), true, function (b) { $.each(b, function (c, d) { a.onmessage(a.MessageEvent(d)) }); a.listen() }) } };